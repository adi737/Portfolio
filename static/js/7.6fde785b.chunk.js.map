{"version":3,"sources":["weather-app/WeatherContainer.css.js","weather-app/index.js"],"names":["colors","WeatherContainer","styled","div","device","L","props","theme","isLightTheme","S","M","XL","XXL","App","console","log","useState","city","setCity","divRef","useRef","fetchWeatherData","key","a","fetch","fetchData","ok","json","data","Error","useQuery","refetchOnWindowFocus","refetchInterval","refetchIntervalInBackground","status","useEffect","current","innerHTML","weatherData","name","temp","main","Math","round","iconCode","weather","icon","iconURL","weatherDescription","description","handleInput","useCallback","e","target","value","id","className","type","onChange","placeholder","htmlFor","ref"],"mappings":"slFAGA,IAAMA,EACK,UADLA,EAEO,UAFPA,EAGE,UAqHOC,EAlHUC,IAAOC,IAAV,IAQXC,IAAOC,EAOeL,GAGlB,SAAAM,GAAK,OAAIA,EAAMC,MAAMC,aAAe,QAAU,UAoB9CR,EAUEA,EAM+BA,EAAkBA,EAOnDI,IAAOK,EASLL,IAAOK,EAOPL,IAAOK,EAIPL,IAAOM,EAGPN,IAAOC,EAGPD,IAAOO,GAGPP,IAAOQ,IAMPR,IAAOK,EAKPL,IAAOC,EAMPD,IAAOK,GCnDTI,UA7DH,WACVC,QAAQC,IAAR,sBADgB,MAGQC,mBAAS,IAHjB,mBAGTC,EAHS,KAGHC,EAHG,KAIVC,EAASC,iBAAO,MAEhBC,EAAgB,uCAAG,WAAOC,EAAKL,GAAZ,iBAAAM,EAAA,sEACCC,MAAM,oDAAD,OAAqDP,EAArD,2DADN,UACjBQ,EADiB,iBAGjBA,EAAUC,GAHO,iCAIAD,EAAUE,OAJV,cAIbC,EAJa,yBAKZA,GALY,cAMR,IAAIC,MAAM,mBANF,0DAQrBf,QAAQC,IAAR,MARqB,0DAAH,wDANN,EAkBSe,YAAS,CAAC,UAAWb,GAAOI,EAAkB,CACrEU,sBAAsB,EACtBC,gBAAiB,KACjBC,6BAA6B,IAHvBC,EAlBQ,EAkBRA,OAAQN,EAlBA,EAkBAA,KAMhBO,qBAAU,WACR,GAAe,YAAXD,EACFf,EAAOiB,QAAQC,UAAf,8CAGK,CACL,IAAMC,EAAcV,GAAQ,GACtBW,EAAOD,EAAW,UAAMA,EAAYC,KAAlB,sBAA6C,GAC/DC,EAAOF,EAAYG,KAAOC,KAAKC,MAAML,EAAYG,KAAKD,KAAO,QAAU,GACvEI,EAAWN,EAAcA,EAAYO,QAAQ,GAAGC,KAAO,GACvDC,EAAUH,EAAQ,2CAAuCA,EAAvC,WAA2D,GAC7EI,EAAqBV,EAAcA,EAAYO,QAAQ,GAAGI,YAAc,GAE9E9B,EAAOiB,QAAQC,UAAf,+CAC+BE,EAD/B,2DAEsCS,EAFtC,2BAGMD,EAAO,wCAAoCA,EAApC,0BAAsE,GAHnF,gDAI+BP,EAAOA,EAAO,QAAU,GAJvD,qBAOD,CAACZ,EAAMM,IAGV,IAAMgB,EAAcC,uBAAY,SAAAC,GAC9BlC,EAAQkC,EAAEC,OAAOC,SAChB,CAACpC,IAEJ,OACE,kBAAC,EAAD,KACE,2BAAOqC,GAAG,OAAOC,UAAU,gBAAgBC,KAAK,OAAOC,SAAUR,EAAaI,MAAOrC,EAAM0C,YAAY,SACvG,2BAAOC,QAAQ,OAAOJ,UAAU,iBAAhC,QACA,yBAAKA,UAAU,UAAUK,IAAK1C","file":"static/js/7.6fde785b.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { device } from 'breakpoints';\n\nconst colors = {\n  primary: '#11998e',\n  secondary: '#38ef7d',\n  gray: '#9b9b9b',\n}\n\nconst WeatherContainer = styled.div`\n  position: relative;\n  padding: 15px 0 0;\n  margin-top: 10px;\n  width: 60%;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  @media ${device.L} {\n    width: 45%;\n    }\n    .weather-input {\n      font-family: inherit;\n      width: 100%;\n      border: 0;\n      border-bottom: 2px solid ${colors.gray};\n      outline: 0;\n      font-size: 1.3rem;\n      color: ${props => props.theme.isLightTheme ? 'black' : 'white'};\n      padding: 7px 0;\n      background: transparent;\n      transition: border-color 0.2s;\n      &::placeholder {\n        color: transparent;\n      }\n      &:placeholder-shown ~ .weather-label {\n        font-size: 1.3rem;\n        cursor: text;\n        top: 20px;\n      }\n    }\n\n    .weather-label {\n      position: absolute;\n      top: 0;\n      display: block;\n      transition: 0.2s;\n      font-size: 1rem;\n      color: ${colors.gray};\n    }\n\n    .weather-input:focus {\n      ~ .weather-label {\n        position: absolute;\n        top: 0;\n        display: block;\n        transition: 0.2s;\n        font-size: 1rem;\n        color: ${colors.primary};\n        font-weight:700;    \n      }\n      padding-bottom: 6px;  \n      font-weight: 700;\n      border-width: 3px;\n      border-image: linear-gradient(to right, ${colors.primary},${colors.secondary});\n      border-image-slice: 1;\n    }\n\n    .weather {\n      display: grid;\n      justify-items: center;\n      @media ${device.S} {\n        grid: \"name icon\" auto\n              \"description temp\" auto\n              / auto auto;\n        align-items: center;\n      }\n      &__name {\n        margin: 20% 0 0;\n        font-size: 1.2rem;\n        @media ${device.S} {\n          grid-area: name;\n          margin: 0 0 -20px;\n        }\n      }\n      &__description {\n        margin: 0;\n        @media ${device.S} {\n          grid-area: description;\n          margin-top: -20px;\n        }\n        @media ${device.M} {\n          margin-top: -35px;\n        }\n        @media ${device.L} {\n          margin-top: -10px;\n        }\n        @media ${device.XL} {\n          margin-top: -30px;\n        }\n        @media ${device.XXL} {\n          margin-top: -40px;\n        }\n      }\n      &__img {\n        width: 50%;\n        @media ${device.S} {\n          grid-area: icon;\n          width: 45%;\n          margin-bottom: -20px;\n        }\n        @media ${device.L} {\n          width: 33%;\n        }\n      }\n      &__temp {\n        margin: 0;\n        @media ${device.S} {\n          grid-area: temp;\n        }\n      }\n    }\n`\n\nexport default WeatherContainer;","import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { useQuery } from 'react-query';\nimport WeatherContainer from './WeatherContainer.css';\n\nconst App = () => {\n  console.log(`invoke weather-app`);\n\n  const [city, setCity] = useState('');\n  const divRef = useRef(null);\n\n  const fetchWeatherData = async (key, city) => {\n    const fetchData = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},{state%20code}&appid=96f2d5e9f0bd472e45e0c005fc4f7901`);\n    try {\n      if (fetchData.ok) {\n        const data = await fetchData.json();\n        return data;\n      } else throw new Error('City not found!');\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const { status, data } = useQuery(['weather', city], fetchWeatherData, {\n    refetchOnWindowFocus: false,\n    refetchInterval: 1000 * 60 * 60,\n    refetchIntervalInBackground: true,\n  });\n\n  useEffect(() => {\n    if (status === 'loading') {\n      divRef.current.innerHTML = `\n          <p>loading...</p>\n        `\n    } else {\n      const weatherData = data || '';\n      const name = weatherData ? `${weatherData.name} - current weather` : '';\n      const temp = weatherData.main ? Math.round(weatherData.main.temp - 274.15) : '';\n      const iconCode = weatherData ? weatherData.weather[0].icon : \"\";\n      const iconURL = iconCode ? `http://openweathermap.org/img/wn/${iconCode}@2x.png` : '';\n      const weatherDescription = weatherData ? weatherData.weather[0].description : '';\n\n      divRef.current.innerHTML = `\n          <p class='weather__name'>${name}</p>\n          <p class='weather__description'>${weatherDescription}</p>\n          ${iconURL ? `<img class='weather__img' src=${iconURL} alt='weather-icon' />` : ''}\n          <p class='weather__temp'>${temp ? temp + '&degC' : ''}</p>\n        `\n    }\n  }, [data, status]);\n\n\n  const handleInput = useCallback(e => {\n    setCity(e.target.value);\n  }, [setCity]);\n\n  return (\n    <WeatherContainer>\n      <input id='name' className='weather-input' type=\"text\" onChange={handleInput} value={city} placeholder=\"Name\" />\n      <label htmlFor=\"name\" className=\"weather-label\">Name</label>\n      <div className='weather' ref={divRef}>\n      </div>\n    </WeatherContainer>\n  );\n}\n\nexport default App;"],"sourceRoot":""}